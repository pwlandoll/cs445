package edu.jcu.plandoll16.printerlocator;

import android.os.Looper;
import android.util.Log;

import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * @author Peter Landoll
 * @version 0.1
 * @since 2016-4-30
 */
public class PrinterHelper {
    private ArrayList<Printer> printerArrayList;
    private ArrayList<String[]> fileContents;

    public PrinterHelper() {
        printerArrayList = new ArrayList<Printer>();
        fileContents = new ArrayList<String[]>();
        // First, populate the list of printers from the TODO: database
        populatePrinterList();
        // Then, get printer status information from online CSV
        fetchPrinterList();
    }
    /**
     * Creates a Thread on a getCSVRunnable object.
     *
     * Android requires that network operations (e.g. fetching a CSV from a URL) be done on a
     * separate thread
     */
    private void fetchPrinterList() {
        try {
            Thread getCSV = new Thread(new getCSVRunnable());
            getCSV.start();
            // Wait a maximum of 10 seconds for the thread to finish, error handling comes later
            getCSV.join(10 * 1000);
        } catch (Exception ex) {
            Log.e("PROBLEM", ex.getMessage());
        }
    }

    /**
     * Handles output text from the CSV file to store the contents properly as an ArrayList.
     *
     * @param contents  the contents of the CSV file to be passed in from fetchPrinterLists's
     *                  getCSVRunnable Thread
     */
    private void handleCSVString(String contents) {
        String text = "";
        String[] csvLines;
        // Split on Windows newlines, as the CSV is generated by a Windows machine
        csvLines = contents.split("\r\n");
        // Split each line on commas, and add it to the fileContents ArrayList<String[]>
        for (String line : csvLines) {
            fileContents.add(line.split(","));
        }
        // We don't need the header row of the CSV, so remove it
        fileContents.remove(0);
        Printer p;
        for (String[] printerInfoArray : fileContents) {
            // TODO: implement checks against printer list
            // if the printer with name printerInfoArray[0] is in the list populated by the
            //  database, then update that printer with status code printerInfoArray[2]
            p = new Printer(printerInfoArray[0]);
            p.setStatusCode(0);
            printerArrayList.add(new Printer(printerInfoArray[0]));
        }
        // TODO: sort printerArrayList before display?
    }

    /**
     * Pulls records from the database and adds them to the list of printers.
     */
    private void populatePrinterList() {

    }

    /**
     * Manages the network operations behind fetching the CSV file.
     */
    private class getCSVRunnable implements Runnable {
        @Override
        public void run() {
            Looper.prepare();
            try {
                // Open a scanner that pulls the CSV and opens with UTF-16 character encodings
                Scanner mScanner = new Scanner(new URL("http://stuweb.jcu.edu/printerstatus2.csv").openStream(), "UTF-16");
                // Get the text
                String out = mScanner.useDelimiter("\\A").next();
                mScanner.close();
                // Passes the output string to another method to handle the text
                handleCSVString(out);
            } catch (Exception ex) {
                Log.e("PROBLEM", ex.getMessage());
            }
        }
    }

    /**
     * returns an ArrayList of printers that are "available" i.e. status code is 0
     *
     * @return ArrayList of printers with status code 0
     */
    public ArrayList<Printer> getAvailablePrinters() {
        ArrayList<Printer> availablePrinters = new ArrayList<Printer>();
        for (Printer p : printerArrayList) {
            if (p.getStatusCode() == 0) {
                availablePrinters.add(p);
            }
        }
        return availablePrinters;
    }

    public ArrayList<Printer> getPrinterArrayList() {
        return printerArrayList;
    }
}
